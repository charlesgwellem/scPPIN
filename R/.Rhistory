pValuesH1vsH3 <- readRDS("./inst/extdata/pValuesClusterH1vsClusterH3.rds")
FDR <- 10^{-2}# choose the false discovery rate
# 2) Computation of the maximum-weight spanning tree
functionalModuleH1H3  <- detectFunctionalModule(ppin,pValuesH1vsH3,FDR)
# 3) Plot the result
# a) using the normal potting function
plotFunctionalModule(functionalModuleH1H3,FDR)
# b) using qgraph for a nicer layout of the nodes
e <- get.edgelist(functionalModuleH1H3,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModuleH1H3))
plotFunctionalModule(functionalModuleH1H3,fdr=FDR,layoutGraph=computedNodePositions)
#4) We can also keep proteins without expression information
functionalModuleH1H3_missingData  <- detectFunctionalModule(ppin,pValuesH1vsH3,FDR,missingDataScore=TRUE)
e2 <- get.edgelist(functionalModuleH1H3_missingData,names=FALSE)
computedNodePositions2 <- qgraph.layout.fruchtermanreingold(e2,vcount=vcount(functionalModuleH1H3_missingData))
plotFunctionalModule(functionalModuleH1H3_missingData,fdr=FDR,layoutGraph=computedNodePositions2)
# 5) If you want to check the fit of the BUM model, you can use the following command with the plot option set to TRUE
fitBUMResult <- fitBUM(pValuesH1vsH3,plot=TRUE)
# Kolmogorov Smirnov test for fit of BUM to data
ks.test(pValuesH1vsH3,BUMdensityCummulative,coef(fitBUMResult)['lambda'],coef(fitBUMResult)['alpha'])
library(GEOquery) # for downloading data from GEO
library(GEOquery) # for downloading data from GEO
#library(GEOquery) # for downloading data from GEO
library(Seurat)
# Kolmogorov Smirnov test for fit of BUM to data
ks.test(pValuesH1vsH3,BUMdensityCummulative,coef(fitBUMResult)['lambda'],coef(fitBUMResult)['alpha'])
# 1) Load the library
library(scPPIN)
functionalModuleH1H3_missingData
library(GEOquery) # for downloading data from GEO
install.packages("GEOquery")
BiocManager::install("GEOquery")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(GEOquery) # for downloading data from GEO
library(GEOquery)
install.packages("rlang")
library(GEOquery)
library(GEOquery) # for downloading data from GEO
library(GEOquery) # for downloading data from GEO
library(GEOquery) # for downloading data from GEO
library(GEOquery) # for downloading data from GEO
# example of how to use scPPIN for publically available data from the Gene Expression Omnibus (GEO)
library(GEOquery) # for downloading data from GEO
library(Seurat)
library(scPPIN)
#gse <- getGEO("GSE94820", GSEMatrix = TRUE)
#show(gse)
#
gseGSE94820CellInfo <- getGEO('GSE94820', GSEMatrix=TRUE)
expressionData = getGEOSuppFiles("GSE94820")
#$seuratObject <- CreateSeuratObject(counts=data$`GSE94820-GPL16791_series_matrix.txt.gz`[[1]])
raw_counts<-read.table(file="./GSE94820/GSE94820_raw.expMatrix_deeper.characterization.set.submission.txt",sep="\t")
head(raw_counts)
scRNA_data <- CreateSeuratObject(counts = raw_counts, project = "GSE94820_scRNAseq")
scRNA_data=ScaleData(scRNA_data)
scRNA_data=FindVariableFeatures(scRNA_data)
scRNA_data=RunPCA(scRNA_data)
scRNA_data <- FindNeighbors(scRNA_data, dims = 1:10)
scRNA_data <- FindClusters(scRNA_data, resolution = 0.5)
scRNA_data=RunTSNE(scRNA_data,dims.use = 1:10)
DimPlot(scRNA_data, reduction = "tsne")
#cluster1.markers <- FindMarkers(scRNA_data, ident.1 = 2, logfc.threshold = 0.0 , min.pct = 0.00,return.thresh
#=0)
# head(cluster1.markers, n = 5)
allMarkers <- FindAllMarkers(scRNA_data)
interestedEntries <-which(allMarkers[6]==6)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-2}# choose the false discovery rate
#FDR <- 10*minPval
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
pVals
pValsTemp
allMarkers
scRNA_data
raw_counts
setwd("~/Dropbox/liverNetwork/code/2019_06_20-forSatu")
gseGSE94820CellInfo
expressionData
raw_counts
raw_counts<-read.table(file="./GSE94820/GSE94820_raw.expMatrix_deeper.characterization.set.submission.txt",sep="\t")
head(raw_counts)
scRNA_data <- CreateSeuratObject(counts = raw_counts, project = "GSE94820_scRNAseq")
scRNA_data=ScaleData(scRNA_data)
scRNA_data=FindVariableFeatures(scRNA_data)
scRNA_data=RunPCA(scRNA_data)
scRNA_data <- FindNeighbors(scRNA_data, dims = 1:10)
scRNA_data <- FindClusters(scRNA_data, resolution = 0.5)
scRNA_data=RunTSNE(scRNA_data,dims.use = 1:10)
DimPlot(scRNA_data, reduction = "tsne")
#cluster1.markers <- FindMarkers(scRNA_data, ident.1 = 2, logfc.threshold = 0.0 , min.pct = 0.00,return.thresh
#=0)
# head(cluster1.markers, n = 5)
allMarkers <- FindAllMarkers(scRNA_data)
# example of how to use scPPIN for publically available data from the Gene Expression Omnibus (GEO)
#library(GEOquery) # for downloading data from GEO
library(Seurat)
library(scPPIN)
# load data
raw_counts<-read.table(file="./GSE94820/GSE94820_raw.expMatrix_deeper.characterization.set.submission.txt",sep="\t")
head(raw_counts)
scRNA_data <- CreateSeuratObject(counts = raw_counts, project = "GSE94820_scRNAseq")
# preprocessing
scRNA_data=ScaleData(scRNA_data)
scRNA_data=FindVariableFeatures(scRNA_data)
# principal component analysis
scRNA_data=RunPCA(scRNA_data)
# do cluster comoutation with nearest neighbour graph and modularity maximisation
scRNA_data <- FindNeighbors(scRNA_data, dims = 1:10)
scRNA_data <- FindClusters(scRNA_data, resolution = 0.5)
# plotting the clusters
scRNA_data=RunTSNE(scRNA_data,dims.use = 1:10)
DimPlot(scRNA_data, reduction = "tsne")
# find markers with a differential expression analysis
# (you can start with the default values)
allMarkers <- FindAllMarkers(scRNA_data)
setwd("~/Dropbox/liverNetwork/code/2019_06_20-forSatu")
# example of how to use scPPIN for publically available data from the Gene Expression Omnibus (GEO)
#library(GEOquery) # for downloading data from GEO
library(Seurat)
library(scPPIN)
# load data
raw_counts<-read.table(file="./GSE94820/GSE94820_raw.expMatrix_deeper.characterization.set.submission.txt",sep="\t")
head(raw_counts)
scRNA_data <- CreateSeuratObject(counts = raw_counts, project = "GSE94820_scRNAseq")
# preprocessing
scRNA_data=ScaleData(scRNA_data)
scRNA_data=FindVariableFeatures(scRNA_data)
# principal component analysis
scRNA_data=RunPCA(scRNA_data)
# do cluster comoutation with nearest neighbour graph and modularity maximisation
scRNA_data <- FindNeighbors(scRNA_data, dims = 1:10)
scRNA_data <- FindClusters(scRNA_data, resolution = 0.5)
# plotting the clusters
scRNA_data=RunTSNE(scRNA_data,dims.use = 1:10)
DimPlot(scRNA_data, reduction = "tsne")
# find markers with a differential expression analysis
# (you can start with the default values)
allMarkers <- FindAllMarkers(scRNA_data)
# (but it is better to compute it for all genes with the options below -- but it should be much slower)
#allMarkers <- FindAllMarkers(scRNA_data,logfc.threshold=0.0,return.thresh=1.0)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-10}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
library(scPPIN)
plotFunctionalModule
setwd("~/GitHub/scPPIN/R")
library(scPPIN)
setwd("~/Dropbox/liverNetwork/code/2019_06_20-forSatu")
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-10}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-8}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-6}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-4}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-3}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
allMarkers <- FindAllMarkers(scRNA_data,logfc.threshold=0.0,return.thresh=1.0)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-3}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
pVals
mean(pVals)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-2}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-1.5}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 6
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-1}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 2
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-3}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
#### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 2
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-5}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 2
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-7}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 3
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-7}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 3
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-9}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
##### everything below you can rerun for every cluster
# the cluster you want to compute for
clusterInterested = 3
# rewriting the p-values
interestedEntries <-which(allMarkers[6]==clusterInterested)
entries <- allMarkers[interestedEntries,]
pValsTemp <-entries['p_val']
pVals <- pValsTemp[[1]]
names(pVals) <- row.names(pValsTemp)
# read the protein interaction network (this could be replaced by your favourite other interactome, e.g., in-house or STRING)
ppin <- read_graph('./biogridHomoSapiens3.5.166.graphml', format='graphml')
#minPval <- min(pVals[pVals>0])
#pVals[pVals==0] = 0.0001*minPval
FDR <- 10^{-12}# choose the false discovery rate
# do the actual computation
# (maybe try the option missingDataScore=TRUE if you want to keep the missing data)
functionalModule  <- detectFunctionalModule(ppin,pVals,FDR)
# do some quick calculation to make the layout of the nodes a bit nicer than the default iGraph function
e <- get.edgelist(functionalModule,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModule))
# plot the output
plotFunctionalModule(functionalModule,fdr=FDR,layoutGraph=computedNodePositions)
