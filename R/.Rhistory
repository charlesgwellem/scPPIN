#
#   # outputvectors
#
#   intersectioDataframe <- data.frame()
#
#
#   # the actual calculation
#   for (iFDR in (1:nFDRvec)) {
#     sigTemp<-significantProteinsAndIntersection(biogridNetwork,geneAsList,FDRvec[iFDR])
#
#     intersectioDataframe <- rbind(intersectioDataframe,c(FDRvec[iFDR], sigTemp[1], sigTemp[2],sigTemp[[1]]-sigTemp[[2]] ))
#   }
#
#   colnames(intersectioDataframe) <- c("FDR","nSigProteins","nSigGenes","nDiff") # rename the columns
#
#
#   cols <- c("nSigProteins" = "red", "nSigGenes" = "blue", "nDiff" = "orange")
#
#
#   # new version of the plot
#   dfPlot <- gather(intersectioDataframe,
#                    value = "value",
#                    key = "type",
#                    nSigProteins,  nSigGenes)
#
#   ggplot(dfPlot,
#          aes(x=value,
#              y=FDR,
#              color=type)) +
#     scale_y_continuous(trans='log10') +
#     scale_x_continuous(name =element_blank()) +
#     scale_colour_discrete(name  ="type",
#                             labels=c("significant genes in functional module", "size functional module")) +
#     geom_point() +
#     theme_light(
#     ) +
#     theme(text = element_text(color = "black",size=20),
#           legend.title = element_blank(),
#           legend.background = element_rect(fill = "NA",color = "black"),
#           #legend.position = c(0.68, 0.15), # position the legend in the upper left
#           legend.position = c("bottom"),
#           legend.direction = "horizontal",
#           legend.text = element_text(size = 20, color = "black"),
#     )
#
#
#
# plot <- ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
# geom_point(size=5) +
# geom_line(aes(y = nSigGenes)) +
# geom_line(aes(y = nDiff),linetype = "dashed") +
# scale_x_continuous(trans='log10') +
# labs(title="Size Functional Module as Function of the FDR") + ylab("Size Functional Module") +
# guides(col = guide_legend()) + theme(legend.position = c(0.4, 0.4))
# plot
# # plot
#
# ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
#   geom_line(aes(y = nSigGenes))
# res <- BH(geneAsList, alpha = FDR) # Benjamini Hochberg correction
# nSig=summary(res)$Rejections # the number of significant
# significantGenes <- sort(geneAsList, TRUE)[1:nSig]
#
# # intersection of both
# intersect(names(V(activeSubgraph)),names(significantGenes))
#
# igraph version for functional module detection
#source("./libraryiGraphFunctionalModule.R")
# library(BioNet)
# library(igraph)
# library(dplyr)
# library(RColorBrewer)
# library(fields)
library(scPPIN)
library(topGO)
library(sgof)
library(tidyverse)
#library(extrafont)
#loadfonts()
# 1) Load data
# 1a) Load biogrid network data
biogridNetwork <- read_graph('biogridHomoSapiens3.5.166.graphml', format='graphml')
# 1b) Load gene expression data (in the form of p-values)
#readGenes = read.csv("./../../data/singleCellGeneExpression/DEG_in_hepatocytes_clusters_nofilter_logfc.csv")
readGenes <- readRDS("./../../data/singleCellGeneExpression/genes.per.cluster.bs_nofilter_20190423.RDS")
geneData = data.frame(readGenes)
#geneData <- geneData[,c("symbol","FS_vs_BS_pvalue","DS_vs_BS_pvalue","DFS_vs_BS_pvalue")] # select only the columns of interest
geneData <- geneData[,c("p_val","avg_logFC","pct.1","pct.2","p_val_adj","cluster","gene")] # select only the columns of interest
clusterInterested = 5
indecesInterested <- which(geneData[6] == clusterInterested)
# 2) Prepare the data
geneAsList <- as.list(as.data.frame(t(geneData[indecesInterested,c(1)])))
names(geneAsList) <- geneData[indecesInterested,]$gene
geneAsList <- unlist(geneAsList)
# 3) The actual calculation
#FDR <- 10^(-5)
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersection <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
#print(activeSubgraph)
#plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#b) Just gene expression
significantGenes <- which(geneAsList<FDR)
intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
nSigProteins <- length(V(activeSubgraph))
nSigGenes<- length(intersectionSignificant)
return(list(nSigProteins,nSigGenes) )
}
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersectionPlot <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
e <- get.edgelist(activeSubgraph,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(activeSubgraph))
plotFunctionalModule(activeSubgraph,fdr=FDR,layoutGraph=computedNodePositions)
#
#     pal <- brewer.pal(11, "PRGn")
#     pValuesSubgraph <- log10(geneAsList[V(activeSubgraph)$name])
#     print(pValuesSubgraph)
#     colSubgraph <- map2color(pValuesSubgraph,pal)
#
#
#     shapeVec <- ifelse(pValuesSubgraph < log10(FDR) , "circle" , "square")
#     plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5,vertex.color = pal[as.numeric(as.factor(colSubgraph))],vertex.shape=shapeVec)
#     V(activeSubgraph)$size=sqrt(degree(activeSubgraph))*5
#     V(activeSubgraph)$shape= "rectangle"
#     #plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#     #b) Just gene expression
#     significantGenes <- which(geneAsList<FDR)
#     intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
#
#     nSigProteins <- length(V(activeSubgraph))
#     nSigGenes<- length(intersectionSignificant)
return(activeSubgraph )
}
FDR <- 10^{-27}
significantProteinsAndIntersectionPlot(biogridNetwork,geneAsList,FDR)
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
geneSubset <- intersect(V(biogridNetwork)$name,names(geneAsList) )
geneList <- factor(as.integer(geneSubset %in% names(V(activeSubgraph))))
#  names(geneList) <- names(V(biogridNetworkNodeWeighted))
names(geneList) <- geneSubset
sigLevel <-0.01
# set up the GO DAG
GOdata <- new("topGOdata",
ontology = "BP",
allGenes = geneList,
nodeSize = 5,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol")
# igraph version for functional module detection
#source("./libraryiGraphFunctionalModule.R")
# library(BioNet)
# library(igraph)
# library(dplyr)
# library(RColorBrewer)
# library(fields)
library(scPPIN)
library(topGO)
library(sgof)
library(tidyverse)
#library(extrafont)
#loadfonts()
# 1) Load data
# 1a) Load biogrid network data
biogridNetwork <- read_graph('biogridHomoSapiens3.5.166.graphml', format='graphml')
# 1b) Load gene expression data (in the form of p-values)
#readGenes = read.csv("./../../data/singleCellGeneExpression/DEG_in_hepatocytes_clusters_nofilter_logfc.csv")
readGenes <- readRDS("./../../data/singleCellGeneExpression/genes.per.cluster.bs_nofilter_20190423.RDS")
geneData = data.frame(readGenes)
#geneData <- geneData[,c("symbol","FS_vs_BS_pvalue","DS_vs_BS_pvalue","DFS_vs_BS_pvalue")] # select only the columns of interest
geneData <- geneData[,c("p_val","avg_logFC","pct.1","pct.2","p_val_adj","cluster","gene")] # select only the columns of interest
clusterInterested = 6
indecesInterested <- which(geneData[6] == clusterInterested)
# 2) Prepare the data
geneAsList <- as.list(as.data.frame(t(geneData[indecesInterested,c(1)])))
names(geneAsList) <- geneData[indecesInterested,]$gene
geneAsList <- unlist(geneAsList)
# 3) The actual calculation
#FDR <- 10^(-5)
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersection <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
#print(activeSubgraph)
#plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#b) Just gene expression
significantGenes <- which(geneAsList<FDR)
intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
nSigProteins <- length(V(activeSubgraph))
nSigGenes<- length(intersectionSignificant)
return(list(nSigProteins,nSigGenes) )
}
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersectionPlot <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
e <- get.edgelist(activeSubgraph,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(activeSubgraph))
plotFunctionalModule(activeSubgraph,fdr=FDR,layoutGraph=computedNodePositions)
#
#     pal <- brewer.pal(11, "PRGn")
#     pValuesSubgraph <- log10(geneAsList[V(activeSubgraph)$name])
#     print(pValuesSubgraph)
#     colSubgraph <- map2color(pValuesSubgraph,pal)
#
#
#     shapeVec <- ifelse(pValuesSubgraph < log10(FDR) , "circle" , "square")
#     plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5,vertex.color = pal[as.numeric(as.factor(colSubgraph))],vertex.shape=shapeVec)
#     V(activeSubgraph)$size=sqrt(degree(activeSubgraph))*5
#     V(activeSubgraph)$shape= "rectangle"
#     #plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#     #b) Just gene expression
#     significantGenes <- which(geneAsList<FDR)
#     intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
#
#     nSigProteins <- length(V(activeSubgraph))
#     nSigGenes<- length(intersectionSignificant)
return(activeSubgraph )
}
FDR <- 10^{-27}
significantProteinsAndIntersectionPlot(biogridNetwork,geneAsList,FDR)
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
geneSubset <- intersect(V(biogridNetwork)$name,names(geneAsList) )
geneList <- factor(as.integer(geneSubset %in% names(V(activeSubgraph))))
#  names(geneList) <- names(V(biogridNetworkNodeWeighted))
names(geneList) <- geneSubset
sigLevel <-0.01
# set up the GO DAG
GOdata <- new("topGOdata",
ontology = "BP",
allGenes = geneList,
nodeSize = 5,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
scoreTemp <- score
GenTable(GOdata,resultFisher, topNodes = 20)
plot.new()
showSigOfNodes(GOdata, score(resultFisher), firstSigNodes = 10, useInfo = 'def')
#
#   # the calculation
#   FDRvec = 10^(seq(-45, -15, by=0.1))
#   nFDRvec = length(FDRvec)
#
#   # outputvectors
#
#   intersectioDataframe <- data.frame()
#
#
#   # the actual calculation
#   for (iFDR in (1:nFDRvec)) {
#     sigTemp<-significantProteinsAndIntersection(biogridNetwork,geneAsList,FDRvec[iFDR])
#
#     intersectioDataframe <- rbind(intersectioDataframe,c(FDRvec[iFDR], sigTemp[1], sigTemp[2],sigTemp[[1]]-sigTemp[[2]] ))
#   }
#
#   colnames(intersectioDataframe) <- c("FDR","nSigProteins","nSigGenes","nDiff") # rename the columns
#
#
#   cols <- c("nSigProteins" = "red", "nSigGenes" = "blue", "nDiff" = "orange")
#
#
#   # new version of the plot
#   dfPlot <- gather(intersectioDataframe,
#                    value = "value",
#                    key = "type",
#                    nSigProteins,  nSigGenes)
#
#   ggplot(dfPlot,
#          aes(x=value,
#              y=FDR,
#              color=type)) +
#     scale_y_continuous(trans='log10') +
#     scale_x_continuous(name =element_blank()) +
#     scale_colour_discrete(name  ="type",
#                             labels=c("significant genes in functional module", "size functional module")) +
#     geom_point() +
#     theme_light(
#     ) +
#     theme(text = element_text(color = "black",size=20),
#           legend.title = element_blank(),
#           legend.background = element_rect(fill = "NA",color = "black"),
#           #legend.position = c(0.68, 0.15), # position the legend in the upper left
#           legend.position = c("bottom"),
#           legend.direction = "horizontal",
#           legend.text = element_text(size = 20, color = "black"),
#     )
#
#
#
# plot <- ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
# geom_point(size=5) +
# geom_line(aes(y = nSigGenes)) +
# geom_line(aes(y = nDiff),linetype = "dashed") +
# scale_x_continuous(trans='log10') +
# labs(title="Size Functional Module as Function of the FDR") + ylab("Size Functional Module") +
# guides(col = guide_legend()) + theme(legend.position = c(0.4, 0.4))
# plot
# # plot
#
# ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
#   geom_line(aes(y = nSigGenes))
# res <- BH(geneAsList, alpha = FDR) # Benjamini Hochberg correction
# nSig=summary(res)$Rejections # the number of significant
# significantGenes <- sort(geneAsList, TRUE)[1:nSig]
#
# # intersection of both
# intersect(names(V(activeSubgraph)),names(significantGenes))
#
# igraph version for functional module detection
#source("./libraryiGraphFunctionalModule.R")
# library(BioNet)
# library(igraph)
# library(dplyr)
# library(RColorBrewer)
# library(fields)
library(scPPIN)
library(topGO)
library(sgof)
library(tidyverse)
#library(extrafont)
#loadfonts()
# 1) Load data
# 1a) Load biogrid network data
biogridNetwork <- read_graph('biogridHomoSapiens3.5.166.graphml', format='graphml')
# 1b) Load gene expression data (in the form of p-values)
#readGenes = read.csv("./../../data/singleCellGeneExpression/DEG_in_hepatocytes_clusters_nofilter_logfc.csv")
readGenes <- readRDS("./../../data/singleCellGeneExpression/genes.per.cluster.bs_nofilter_20190423.RDS")
geneData = data.frame(readGenes)
#geneData <- geneData[,c("symbol","FS_vs_BS_pvalue","DS_vs_BS_pvalue","DFS_vs_BS_pvalue")] # select only the columns of interest
geneData <- geneData[,c("p_val","avg_logFC","pct.1","pct.2","p_val_adj","cluster","gene")] # select only the columns of interest
clusterInterested = 7
indecesInterested <- which(geneData[6] == clusterInterested)
# 2) Prepare the data
geneAsList <- as.list(as.data.frame(t(geneData[indecesInterested,c(1)])))
names(geneAsList) <- geneData[indecesInterested,]$gene
geneAsList <- unlist(geneAsList)
# 3) The actual calculation
#FDR <- 10^(-5)
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersection <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
#print(activeSubgraph)
#plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#b) Just gene expression
significantGenes <- which(geneAsList<FDR)
intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
nSigProteins <- length(V(activeSubgraph))
nSigGenes<- length(intersectionSignificant)
return(list(nSigProteins,nSigGenes) )
}
## Define a function that returns the number of significant proteins and the size of the itnersection
significantProteinsAndIntersectionPlot <-function(biogridNetwork,geneAsList,FDR){
# Input:
#   FDR -- False Discovery Rate
#a) Our method
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
#activeSubgraph<-activeSubgraphTemp[[1]]
e <- get.edgelist(activeSubgraph,names=FALSE)
computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(activeSubgraph))
plotFunctionalModule(activeSubgraph,fdr=FDR,layoutGraph=computedNodePositions)
#
#     pal <- brewer.pal(11, "PRGn")
#     pValuesSubgraph <- log10(geneAsList[V(activeSubgraph)$name])
#     print(pValuesSubgraph)
#     colSubgraph <- map2color(pValuesSubgraph,pal)
#
#
#     shapeVec <- ifelse(pValuesSubgraph < log10(FDR) , "circle" , "square")
#     plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5,vertex.color = pal[as.numeric(as.factor(colSubgraph))],vertex.shape=shapeVec)
#     V(activeSubgraph)$size=sqrt(degree(activeSubgraph))*5
#     V(activeSubgraph)$shape= "rectangle"
#     #plot(activeSubgraph,layout=layout.fruchterman.reingold,vertex.label.dist=2.5)
#     #b) Just gene expression
#     significantGenes <- which(geneAsList<FDR)
#     intersectionSignificant <- intersect(names(V(activeSubgraph)),names(significantGenes))
#
#     nSigProteins <- length(V(activeSubgraph))
#     nSigGenes<- length(intersectionSignificant)
return(activeSubgraph )
}
FDR <- 10^{-27}
significantProteinsAndIntersectionPlot(biogridNetwork,geneAsList,FDR)
activeSubgraph<- detectFunctionalModule(biogridNetwork,geneAsList,FDR)
geneSubset <- intersect(V(biogridNetwork)$name,names(geneAsList) )
geneList <- factor(as.integer(geneSubset %in% names(V(activeSubgraph))))
#  names(geneList) <- names(V(biogridNetworkNodeWeighted))
names(geneList) <- geneSubset
sigLevel <-0.01
# set up the GO DAG
GOdata <- new("topGOdata",
ontology = "BP",
allGenes = geneList,
nodeSize = 5,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
scoreTemp <- score
GenTable(GOdata,resultFisher, topNodes = 20)
plot.new()
showSigOfNodes(GOdata, score(resultFisher), firstSigNodes = 10, useInfo = 'def')
#
#   # the calculation
#   FDRvec = 10^(seq(-45, -15, by=0.1))
#   nFDRvec = length(FDRvec)
#
#   # outputvectors
#
#   intersectioDataframe <- data.frame()
#
#
#   # the actual calculation
#   for (iFDR in (1:nFDRvec)) {
#     sigTemp<-significantProteinsAndIntersection(biogridNetwork,geneAsList,FDRvec[iFDR])
#
#     intersectioDataframe <- rbind(intersectioDataframe,c(FDRvec[iFDR], sigTemp[1], sigTemp[2],sigTemp[[1]]-sigTemp[[2]] ))
#   }
#
#   colnames(intersectioDataframe) <- c("FDR","nSigProteins","nSigGenes","nDiff") # rename the columns
#
#
#   cols <- c("nSigProteins" = "red", "nSigGenes" = "blue", "nDiff" = "orange")
#
#
#   # new version of the plot
#   dfPlot <- gather(intersectioDataframe,
#                    value = "value",
#                    key = "type",
#                    nSigProteins,  nSigGenes)
#
#   ggplot(dfPlot,
#          aes(x=value,
#              y=FDR,
#              color=type)) +
#     scale_y_continuous(trans='log10') +
#     scale_x_continuous(name =element_blank()) +
#     scale_colour_discrete(name  ="type",
#                             labels=c("significant genes in functional module", "size functional module")) +
#     geom_point() +
#     theme_light(
#     ) +
#     theme(text = element_text(color = "black",size=20),
#           legend.title = element_blank(),
#           legend.background = element_rect(fill = "NA",color = "black"),
#           #legend.position = c(0.68, 0.15), # position the legend in the upper left
#           legend.position = c("bottom"),
#           legend.direction = "horizontal",
#           legend.text = element_text(size = 20, color = "black"),
#     )
#
#
#
# plot <- ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
# geom_point(size=5) +
# geom_line(aes(y = nSigGenes)) +
# geom_line(aes(y = nDiff),linetype = "dashed") +
# scale_x_continuous(trans='log10') +
# labs(title="Size Functional Module as Function of the FDR") + ylab("Size Functional Module") +
# guides(col = guide_legend()) + theme(legend.position = c(0.4, 0.4))
# plot
# # plot
#
# ggplot(data = intersectioDataframe, mapping = aes(x = FDR, y = nSigProteins)) +
#   geom_line(aes(y = nSigGenes))
# res <- BH(geneAsList, alpha = FDR) # Benjamini Hochberg correction
# nSig=summary(res)$Rejections # the number of significant
# significantGenes <- sort(geneAsList, TRUE)[1:nSig]
#
# # intersection of both
# intersect(names(V(activeSubgraph)),names(significantGenes))
#
library(monocle)
# 1) load the trajectories
trajectoryData <- readRDS("./../../data/main_trajectory_summary/blood_cds.RDS")
setwd("/data/crow/klimm/Dropbox/scPPIN-mouse/code/2019_06-trajectory")
# 1) load the trajectories
trajectoryData <- readRDS("./../../data/main_trajectory_summary/blood_cds.RDS")
diff_test_res <- differentialGeneTest(trajectoryData,
fullModelFormulaStr = "~day")
diff_test_res
shiny::runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
runApp('/data/crow/klimm/GitHub/IPSER/scPPIN-online/scPPIN-online')
ls
ls()
gc()
setwd("/data/crow/klimm/GitHub/scPPIN/R")
