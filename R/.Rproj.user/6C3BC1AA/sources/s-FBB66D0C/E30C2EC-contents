  # igraph version for functional module detection


library(scPPIN)

  # 1) Load data
  # 1a) Load biogrid network data
  biogridNetwork <- read_graph('biogridHomoSapiens3.5.166.graphml', format='graphml')

  # 1b) Load gene expression data (in the form of p-values)
  readGenes = read.csv("./../../data/singleCellGeneExpression/DEG_in_hepatocytes_clusters_nofilter_logfc.csv")


  geneData = data.frame(readGenes)
  #geneData <- geneData[,c("symbol","FS_vs_BS_pvalue","DS_vs_BS_pvalue","DFS_vs_BS_pvalue")] # select only the columns of interest
  geneData <- geneData[,c("p_val","avg_logFC","pct1","pct2","p_val_adj","cluster","gene")] # select only the columns of interest


  clusterInterested = 7

  indecesInterested <- which(geneData[6] == clusterInterested)




  # a) for monolayer version
  geneAsList <- as.list(as.data.frame(t(geneData[indecesInterested,c(1)])))
  names(geneAsList) <- geneData[indecesInterested,]$gene
  geneAsList <- unlist(geneAsList)


#layout.reingold.tilford(functionalModule, circular=T)



  FDR <- 10^{-28}# choose the false discovery rate

  # 2) Computation of the maximum-weight spannign tree
  functionalModuleOneVsOne  <-detectFunctionalModule(biogridNetwork,geneAsList,FDR)
  # 3) Plot the result
  #computedNodePositions = layout.reingold.tilford(functionalModule, circular=T)
  #computedNodePositions = layout.kamada.kawai(functionalModuleOneVsOne)
#,repulse.rad=length(V(functionalModuleOneVsOne))**2

  e <- get.edgelist(functionalModuleOneVsOne,names=FALSE)
  computedNodePositions <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(functionalModuleOneVsOne),niter=10000)

  plotFunctionalModule(functionalModuleOneVsOne,fdr=FDR,layoutGraph=computedNodePositions,nodeScale=1.5)


  # 4) If you want to check the fit of the BUM model, use a function from BioNet:
  #fitBumModel(geneAsList,plot=TRUE)
